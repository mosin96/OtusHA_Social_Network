# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, first_name=None, second_name=None, birthdate=None, biography=None, city=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param id: The id of this User.  # noqa: E501
        :type id: str
        :param first_name: The first_name of this User.  # noqa: E501
        :type first_name: str
        :param second_name: The second_name of this User.  # noqa: E501
        :type second_name: str
        :param birthdate: The birthdate of this User.  # noqa: E501
        :type birthdate: date
        :param biography: The biography of this User.  # noqa: E501
        :type biography: str
        :param city: The city of this User.  # noqa: E501
        :type city: str
        """
        self.openapi_types = {
            'id': str,
            'first_name': str,
            'second_name': str,
            'birthdate': date,
            'biography': str,
            'city': str
        }

        self.attribute_map = {
            'id': 'id',
            'first_name': 'first_name',
            'second_name': 'second_name',
            'birthdate': 'birthdate',
            'biography': 'biography',
            'city': 'city'
        }

        self._id = id
        self._first_name = first_name
        self._second_name = second_name
        self._birthdate = birthdate
        self._biography = biography
        self._city = city

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this User.

        Идентификатор пользователя  # noqa: E501

        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        Идентификатор пользователя  # noqa: E501

        :param id: The id of this User.
        :type id: str
        """

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this User.

        Имя  # noqa: E501

        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        Имя  # noqa: E501

        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def second_name(self):
        """Gets the second_name of this User.

        Фамилия  # noqa: E501

        :return: The second_name of this User.
        :rtype: str
        """
        return self._second_name

    @second_name.setter
    def second_name(self, second_name):
        """Sets the second_name of this User.

        Фамилия  # noqa: E501

        :param second_name: The second_name of this User.
        :type second_name: str
        """

        self._second_name = second_name

    @property
    def birthdate(self):
        """Gets the birthdate of this User.

        Дата рождения  # noqa: E501

        :return: The birthdate of this User.
        :rtype: date
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate):
        """Sets the birthdate of this User.

        Дата рождения  # noqa: E501

        :param birthdate: The birthdate of this User.
        :type birthdate: date
        """

        self._birthdate = birthdate

    @property
    def biography(self):
        """Gets the biography of this User.

        Интересы  # noqa: E501

        :return: The biography of this User.
        :rtype: str
        """
        return self._biography

    @biography.setter
    def biography(self, biography):
        """Sets the biography of this User.

        Интересы  # noqa: E501

        :param biography: The biography of this User.
        :type biography: str
        """

        self._biography = biography

    @property
    def city(self):
        """Gets the city of this User.

        Город  # noqa: E501

        :return: The city of this User.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this User.

        Город  # noqa: E501

        :param city: The city of this User.
        :type city: str
        """

        self._city = city
